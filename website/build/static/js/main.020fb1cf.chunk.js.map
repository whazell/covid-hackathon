{"version":3,"sources":["components/businessCard/index.js","components/HeaderTitle/index.js","components/businessDetail/index.js","util/useEffectAsync.js","components/HomePage/index.js","api/company.js","components/newFactForm/index.js","App.js","serviceWorker.js","index.js"],"names":["Meta","BusinessCard","props","company","Facts","Name","Rating","console","log","className","cover","alt","src","Logo","actions","to","style","padding","map","fact","Summary","href","Link","HeaderTitle","BusinessDetail","id","useParams","useEffectAsync","effect","dependencies","useEffect","HomePage","useState","companies","setCompanies","a","axios","get","res","data","TextArea","NewFactForm","name","onFinish","values","labelCol","span","wrapperCol","Item","label","noStyle","rules","required","message","width","placeholder","colon","type","htmlType","Search","App","textAlign","marginTop","marginBottom","onSearch","value","enterButton","exact","path","children","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uWAWQA,KA4BOC,MA1BOC,IAAW,MACtBC,EAAWD,EAAXC,QACCC,EAAwBD,EAAxBC,MAAOC,EAAiBF,EAAjBE,KAAMC,EAAWH,EAAXG,OAErB,OADAC,QAAQC,IAAIJ,GACJ,uBACRK,UAAU,gBACVC,MACE,yBACEC,IAAI,UACJC,IAAKT,EAAQU,OAGjBC,QAAS,IAGT,kBAAC,IAAD,CAAMC,GAAG,YACP,0BAAMN,UAAU,oBAAoBJ,EAApC,IAA0C,0BAAMI,UAAU,iBAAiB,0BAAMO,MAAO,CAACC,QAAQ,QAASX,MAEzGF,EAAMc,IAAIC,GAAQ,6BAEjB,4BACI,8BAAQA,EAAKC,QAAb,KAAuB,uBAAGC,KAAMF,EAAKG,MAAd,aCpBpBC,MAZK,IAChB,6BACA,uBAAGd,UAAU,eAAb,qBAGA,mGCMWe,MATe,KAAO,IAC3BC,EAAOC,cAAPD,GACN,OACI,2DACkCA,I,0BCS3BE,MATQ,CACrBC,EACAC,KAEAC,oBAAU,KACRF,KACCC,I,iBCQUE,MAfE,KAAO,MAAD,EACcC,mBAAS,IADvB,mBACbC,EADa,KACFC,EADE,KAMrB,OAJAP,EAAc,sBAAC,4BAAAQ,EAAA,sECLoBC,IAAMC,IAAN,UAFzB,wBAEyB,mBDKpB,OACPC,EADO,OAEbJ,EAAaI,EAAIC,MAFJ,2CAGZ,IAEH,6BACE,yBAAK9B,UAAU,gBACdwB,EAAUf,IAAIf,GAAW,kBAAC,EAAD,CAAcA,QAASA,Q,+CEb9CqC,E,IAAAA,SAyCQC,MAxCK,IAKV,yBAAKhC,UAAU,iBACvB,uBAAMiC,KAAK,eAAeC,SALPC,IACbrC,QAAQC,IAAI,4BAA6BoC,IAIDC,SAAU,CAAEC,KAAM,GAAKC,WAAY,CAAED,KAAM,KACjF,sBAAME,KAAN,CAAWC,MAAM,YACf,sBAAMD,KAAN,CACEN,KAAK,WACLQ,SAAO,EACPC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,0BAEnC,uBAAOrC,MAAO,CAAEsC,MAAO,KAAOC,YAAY,4BAI9C,sBAAMP,KAAN,CAAWC,MAAM,WACf,sBAAMD,KAAN,CACEN,KAAK,UACLQ,SAAO,EACPC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,yBAEnC,kBAACb,EAAD,CAAUxB,MAAO,CAAEsC,MAAO,KAAOC,YAAY,2BAIjD,sBAAMP,KAAN,CAAWC,MAAM,IAAIO,OAAO,GAC1B,uBAAQC,KAAK,UAAUC,SAAS,UAAhC,UAGA,uBAAQD,KAAK,WAAb,a,MCvBJE,E,IAAAA,OAkBOC,MAhBH,KAAO,MAAD,EAC+B5B,oBAAS,GADxC,6BAEhB,OACA,kBAAC,IAAD,KACG,6BAAShB,MAAO,CAAE6C,UAAW,SAAUC,UAAW,GAAIC,aAAc,KACjE,kBAAC,EAAD,MACJ,kBAACJ,EAAD,CAAQ3C,MAAO,CAACsC,MAAM,KAAMC,YAAY,qBAAqBS,SAAUC,GAAS1D,QAAQC,IAAIyD,GAAQC,aAAW,KAE/G,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,SAAU,kBAAC,EAAD,QAChC,kBAAC,IAAD,CAAOD,KAAK,OAAOC,SAAU,kBAAC,EAAD,WCbfC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAKC,IACjCA,EAAaC,gB","file":"static/js/main.020fb1cf.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, Rate, Divider } from 'antd';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n  } from \"react-router-dom\";\nimport '../../App.less';\nimport './style.less';\n\nconst { Meta } = Card;\n\nconst BusinessCard = (props) => {\n    const {company} = props;\n    const { Facts, Name, Rating } = company;\n    console.log(Facts);\n    return  <Card\n    className=\"business-card\"\n    cover={\n      <img\n        alt=\"example\"\n        src={company.Logo}\n      />\n    }\n    actions={[\n    ]}\n  >\n    <Link to=\"/netflix\">\n      <span className=\"header-sub-title\">{Name} <span className=\"circle-rating\" ><span style={{padding:'5px'}}>{Rating}</span></span></span>\n      </Link>\n      {Facts.map(fact => <div>\n\n        <Divider/>\n            <span >{fact.Summary}  <a href={fact.Link}>Link</a></span>\n      </div>)}\n  </Card>\n}\n\nexport default BusinessCard;","import React from 'react';\nimport '../../App.less';\nconst HeaderTitle = () =>  (\n    <div>\n    <p className=\"header-text\">\n        Business For Good\n    </p>    \n    <p>\n        We believe that business should be doing good in the time like this\n    </p>\n    </div>\n\n)\n\nexport default HeaderTitle;","import React from 'react';\nimport {\n    useParams\n  } from \"react-router-dom\";\nexport const BusinessDetail = () => {\n    let { id } = useParams();\n    return (\n        <p>\n            This is business detail page {id}\n        </p>\n    )\n}\n\nexport default BusinessDetail;","import { useEffect } from 'react';\n\n/**\n * Util func so you can do useEffectAsync(async () => { await stuff()})\n * Does not support an unsubscriber!\n * @param effect\n * @param dependencies\n */\nconst useEffectAsync = (\n  effect,\n  dependencies\n) => {\n  useEffect(() => {\n    effect();\n  }, dependencies);\n};\n\nexport default useEffectAsync;\n","import React, {useState} from 'react';\nimport {BusinessCard} from '../index'\nimport { useEffectAsync } from '../../util';\nimport { getAllCompanies } from '../../api/company';\nimport '../../App.less'\n\n\nconst HomePage = () => {\n  const [ companies, setCompanies] = useState([])\n  useEffectAsync(async () => {\n    const res = await getAllCompanies();\n    setCompanies(res.data);\n  }, [])\n  return(\n  <div>\n    <div className=\"company-grid\">\n    {companies.map(company => <BusinessCard company={company}/>)}\n    </div> \n  </div>\n   )\n};\n\nexport default HomePage;\n","import axios from 'axios';\n\nconst URL = 'http://34.68.214.180/';\n\nexport const getAllCompanies = () => axios.get(`${URL}api/v1/company`);\n\nexport const postCompanyFact = (id, citation, summary) => axios.post(`${URL}api/v1/compnay/${id}`, {\n    Citaion: citation,\n    Summary: summary,\n    })\n    \n\nexport const postFact = (citation, summary) => axios.post(`${URL}api/v1/fact`, {\nCitaion: citation,\nSummary: summary,\n})\n","import React from 'react';\nimport { Form, Input, Select, Tooltip, Button } from 'antd';\nimport './style.less'\nconst {TextArea } = Input;\nconst NewFactForm = () => {\n    const onFinish = values => {\n        console.log('Received values of form: ', values);\n      };\n      return (\n          <div className=\"new-fact-form\">\n  <Form name=\"complex-form\" onFinish={onFinish} labelCol={{ span: 8 }} wrapperCol={{ span: 16 }}>\n          <Form.Item label=\"Citation\">\n            <Form.Item\n              name=\"citation\"\n              noStyle\n              rules={[{ required: true, message: 'citation is required' }]}\n            >\n              <Input style={{ width: 160 }} placeholder=\"Please enter citation\" />\n            </Form.Item>\n          </Form.Item>\n\n          <Form.Item label=\"Summary\">\n            <Form.Item\n              name=\"summary\"\n              noStyle\n              rules={[{ required: true, message: 'summary is required' }]}\n            >\n              <TextArea style={{ width: 300 }} placeholder=\"Please enter summary\" />\n            </Form.Item>\n          </Form.Item>\n          \n          <Form.Item label=\" \" colon={false}>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Submit\n            </Button>\n            <Button type=\"primary\">\n              Cancel\n            </Button>\n          </Form.Item>\n        </Form>\n          </div>\n      )\n}\n\nexport default NewFactForm;","import React, {useState} from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useParams\n} from \"react-router-dom\";\nimport { Select, Typography, Input } from 'antd';\nimport {HomePage, HeaderTitle,  BusinessDetail, NewFactForm} from './components'\nimport './App.less';\n\nconst { Search } = Input;\n\nconst App = () => {\n  const [showNewFactForm, setShowNewFactForm ] = useState(false);\n  return(\n  <Router>\n     <section style={{ textAlign: 'center', marginTop: 48, marginBottom: 60 }}>\n        <HeaderTitle/>\n    <Search style={{width:400}} placeholder=\"Search the company\" onSearch={value => console.log(value)} enterButton />  \n  </section>  \n    <NewFactForm/>\n    <Switch>\n      <Route exact path=\"/\" children={<HomePage/>} />\n      <Route path=\"/:id\" children={<BusinessDetail />} />\n    </Switch>\n  </Router>)\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}